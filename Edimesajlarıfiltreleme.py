{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c8e5099f-f0f6-4468-b85f-0fdfa2805996",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "from tkinter import *\n",
    "from tkinter import ttk, messagebox\n",
    "\n",
    "# Pandas ayarları\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.width', 1000)\n",
    "pd.set_option('display.colheader_justify', 'center')\n",
    "pd.set_option('display.max_colwidth', 50)\n",
    "\n",
    "def read_folder_path():\n",
    "    try:\n",
    "        # txt dosyasının tam yolunu buraya yazın\n",
    "        txt_file_path = r\"C:\\Users\\DELL\\OneDrive\\Masaüstü\\cnf_ini.txt\"\n",
    "        \n",
    "        with open(txt_file_path, \"r\", encoding=\"utf-8\") as file:\n",
    "            folder_path = file.readline().strip()\n",
    "        \n",
    "        # Klasör yolunu kontrol et\n",
    "        if not os.path.exists(folder_path):\n",
    "            raise FileNotFoundError(f\"Klasör yolu bulunamadı: {folder_path}\")\n",
    "        \n",
    "        return folder_path\n",
    "    \n",
    "    except Exception as e:\n",
    "        print(f\"Hata: {e}\")\n",
    "        messagebox.showerror(\"Hata\", f\"Metin belgesi okunurken hata oluştu: {e}\")\n",
    "        root.destroy()\n",
    "\n",
    "def load_data():\n",
    "    folder_path = read_folder_path()\n",
    "    file_paths = [os.path.join(folder_path, file) for file in os.listdir(folder_path)\n",
    "                  if os.path.isfile(os.path.join(folder_path, file)) and 'desktop.ini' not in file]\n",
    "\n",
    "    all_data = []\n",
    "    for file_index, file_path in enumerate(file_paths):\n",
    "        file_name = os.path.basename(file_path)\n",
    "        modification_time = os.path.getmtime(file_path)\n",
    "        modification_time_str = datetime.fromtimestamp(modification_time).strftime('%Y-%m-%d %H:%M:%S')\n",
    "\n",
    "        edi_type = \"\"\n",
    "        sender = \"Sender information not found\"\n",
    "        receiver = \"Receiver information not found\"\n",
    "\n",
    "        # EDI Türü belirleme\n",
    "        if 'DELINS' in file_name:\n",
    "            edi_type = \"DELINS\"\n",
    "        elif 'DELJIT' in file_name:\n",
    "            edi_type = \"DELJIT\"\n",
    "        elif 'DELFOR' in file_name:\n",
    "            edi_type = \"DELFOR\"\n",
    "        elif 'VDA4905' in file_name:\n",
    "            edi_type = \"VDA4905\"\n",
    "        elif 'VDA4915' in file_name:\n",
    "            edi_type = \"VDA4915\"\n",
    "\n",
    "        # Dosya içeriğinden sender/receiver bilgisi alma\n",
    "        try:\n",
    "            with open(file_path, 'r', encoding='utf-8') as file:\n",
    "                edi_content = file.readlines()\n",
    "\n",
    "            # DELINS için: 2. artıdan sonra sender, 3. artıdan sonra receiver\n",
    "            if edi_type == \"DELINS\":\n",
    "                for line in edi_content:\n",
    "                    segment = line.strip().split('+')\n",
    "                    if len(segment) > 3:\n",
    "                        sender = segment[2].strip()  # 2. artıdan sonraki kısım\n",
    "                        receiver = segment[3].strip()  # 3. artıdan sonraki kısım\n",
    "                        break\n",
    "\n",
    "            # DELFOR için NAD segmentinden bilgi çekme\n",
    "            elif edi_type == \"DELFOR\":\n",
    "                for line in edi_content:\n",
    "                    segment = line.strip().split('+')\n",
    "                    if segment[0] == 'NAD':\n",
    "                        if segment[1] == 'BY':  # Buyer\n",
    "                            receiver = segment[4].strip() if len(segment) > 4 else \"Receiver missing\"\n",
    "                        elif segment[1] == 'SE':  # Sender\n",
    "                            sender = segment[4].strip() if len(segment) > 4 else \"Sender missing\"\n",
    "\n",
    "            # DELJIT için UNB segmentinden bilgi çekme\n",
    "            elif edi_type == \"DELJIT\":\n",
    "                for line in edi_content:\n",
    "                    segment = line.strip().split('+')\n",
    "                    if segment[0] == 'UNB' and len(segment) > 3:\n",
    "                        sender = segment[2].split(':')[0].strip()\n",
    "                        receiver = segment[3].split(':')[0].strip()\n",
    "                        break\n",
    "\n",
    "            # VDA dosyaları için sabit konumdan bilgi çekme\n",
    "            elif edi_type in [\"VDA4905\", \"VDA4915\"]:\n",
    "                for line in edi_content:\n",
    "                    if len(line) >= 23:\n",
    "                        sender = line[5:14].strip()\n",
    "                        receiver = line[14:23].strip()\n",
    "                        break\n",
    "\n",
    "        except Exception as e:\n",
    "            print(f\"Hata: {file_name} dosyası işlenirken hata oluştu: {e}\")\n",
    "\n",
    "        # Veriyi tabloya ekle\n",
    "        all_data.append({\n",
    "            \"Sıra No\": file_index + 1,\n",
    "            \"File Name\": file_name[:25],\n",
    "            \"EDI Type\": edi_type,\n",
    "            \"Sender\": sender[:30],\n",
    "            \"Receiver\": receiver[:30],\n",
    "            \"Modification Time\": modification_time_str\n",
    "        })\n",
    "\n",
    "    global df\n",
    "    df = pd.DataFrame(all_data)\n",
    "    update_treeview(df)\n",
    "\n",
    "# TreeView'i güncelleme\n",
    "def update_treeview(data):\n",
    "    for row in tree.get_children():\n",
    "        tree.delete(row)\n",
    "    for index, row in data.iterrows():\n",
    "        tree.insert(\"\", \"end\", values=list(row))\n",
    "\n",
    "# Tkinter Ana Pencere\n",
    "root = Tk()\n",
    "root.title(\"EDI Dosyası Filtreleme\")\n",
    "root.geometry(\"800x600\")\n",
    "\n",
    "# Başlık\n",
    "Label(root, text=\"Tüm Dosyalar\", font=(\"Arial\", 16)).grid(row=0, column=0, columnspan=4, pady=10)\n",
    "\n",
    "# TreeView ile tablo gösterimi\n",
    "columns = (\"Sıra No\", \"File Name\", \"EDI Type\", \"Sender\", \"Receiver\", \"Modification Time\")\n",
    "tree = ttk.Treeview(root, columns=columns, show=\"headings\", height=15)\n",
    "for col in columns:\n",
    "    tree.heading(col, text=col)\n",
    "tree.grid(row=1, column=0, columnspan=4, padx=10, pady=10)\n",
    "\n",
    "# Filtreleme alanları\n",
    "Label(root, text=\"EDI Türü:\").grid(row=2, column=0, padx=10, pady=10, sticky=W)\n",
    "edi_type_entry = Entry(root, width=20)\n",
    "edi_type_entry.grid(row=2, column=1, padx=10, pady=10)\n",
    "\n",
    "Label(root, text=\"Gönderen:\").grid(row=3, column=0, padx=10, pady=10, sticky=W)\n",
    "sender_entry = Entry(root, width=20)\n",
    "sender_entry.grid(row=3, column=1, padx=10, pady=10)\n",
    "\n",
    "Label(root, text=\"Alıcı:\").grid(row=4, column=0, padx=10, pady=10, sticky=W)\n",
    "receiver_entry = Entry(root, width=20)\n",
    "receiver_entry.grid(row=4, column=1, padx=10, pady=10)\n",
    "\n",
    "Label(root, text=\"Yıl:\").grid(row=5, column=0, padx=10, pady=10, sticky=W)\n",
    "year_entry = Entry(root, width=20)\n",
    "year_entry.grid(row=5, column=1, padx=10, pady=10)\n",
    "\n",
    "# Filtreleme fonksiyonu\n",
    "def apply_filter():\n",
    "    filtered_df = df.copy()\n",
    "    edi_type = edi_type_entry.get().strip()\n",
    "    sender = sender_entry.get().strip()\n",
    "    receiver = receiver_entry.get().strip()\n",
    "    year = year_entry.get().strip()\n",
    "\n",
    "    if edi_type:\n",
    "        filtered_df = filtered_df[filtered_df[\"EDI Type\"].str.contains(edi_type, case=False, na=False)]\n",
    "    if sender:\n",
    "        filtered_df = filtered_df[filtered_df[\"Sender\"].str.contains(sender, case=False, na=False)]\n",
    "    if receiver:\n",
    "        filtered_df = filtered_df[filtered_df[\"Receiver\"].str.contains(receiver, case=False, na=False)]\n",
    "    if year:\n",
    "        filtered_df[\"Modification Time\"] = pd.to_datetime(filtered_df[\"Modification Time\"])\n",
    "        filtered_df = filtered_df[filtered_df[\"Modification Time\"].dt.year == int(year)]\n",
    "\n",
    "    if filtered_df.empty:\n",
    "        messagebox.showinfo(\"Sonuç\", \"Filtreleme sonucunda veri bulunamadı.\")\n",
    "    else:\n",
    "        update_treeview(filtered_df)\n",
    "\n",
    "# Filtreleri temizleme fonksiyonu\n",
    "def clear_filters():\n",
    "    edi_type_entry.delete(0, END)\n",
    "    sender_entry.delete(0, END)\n",
    "    receiver_entry.delete(0, END)\n",
    "    year_entry.delete(0, END)\n",
    "    update_treeview(df)\n",
    "\n",
    "\n",
    "# Filtreleme ve temizleme butonları\n",
    "Button(root, text=\"Filtrele\", command=apply_filter).grid(row=6, column=1, padx=10, pady=10)\n",
    "Button(root, text=\"Temizle\", command=clear_filters).grid(row=6, column=2, padx=10, pady=10)\n",
    "\n",
    "# Uygulamayı çalıştırma ve verileri yükleme\n",
    "load_data()\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eaa8fd81-1929-4fcc-991e-b13fb14325b9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
